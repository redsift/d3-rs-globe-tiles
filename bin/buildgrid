#!/usr/bin/env node

'use strict'

const argv = require('minimist')(process.argv.slice(2), { alias: { 'help': 'h' }, boolean: [ 't', 'h' ] }),
    fs = require('fs'),
    path = require('path'),
    grid = require('../');

let cmdError = argv._.length == 0;

if (argv.h || cmdError) {
    if (cmdError) {
        console.error('MAP file must be supplied');
    }
    console.log(`buildgrid: Create hex tiles for mapping

    buildgrid [OPTIONS] MAP.png

    MAP \t PNG file to process. Black pixels indicate mass of interest

Options:
    -t \t Use the smaller array packed version
    -r RADIUS \t Radius used to calculate position of tiles
    -d DIVISIONS \t Divide each edge of the icosohedron into this many segments (5 = low level of detail, 35 - medium, >50 - high)
    -w WIDTH \t Add padding (1.0 = no padding; 0.1 = mostly padding)
    -o FILE \t Output file, .json or ES6 .js depending on file ext. Defaults to STDOUT
    -e THRESHOLD \t Detail threshold to emit hex tile for (1.0 = ignore everything, 0.1 = capture small detail) 
    -v FILE \t JSON file to use for overlaying value field
    -c WIDTH \t Ocean tile padding (1.0 = no padding; 0.1 = mostly padding; 0.0 = no ocean tiles)
    `);

    process.exit(cmdError ? 1 : 0);
}

const options = {
    radius: argv.r ? parseInt(argv.r) : null,
    divisions: argv.d ? parseInt(argv.d) : null,
    width: argv.w ? parseFloat(argv.w) : null,    
    ocean: argv.c ? parseFloat(argv.c) : null, 
    threshold: argv.e ? parseFloat(argv.e) : null,   
    tiny: argv.t === true, 
    value: argv.v ? require(path.resolve(argv.v)) : null   
}

for (let map of argv._) {
    grid(map, options)
    .then(j => {
            if (argv.o) {
                if (path.extname(argv.o).toLowerCase() === '.js') {
                    j = `export const tiles = ${j};`;
                }
                const file = argv.o;
                fs.writeFileSync(file, j);
                const stat = fs.statSync(file);
                console.log(`Wrote ${file} grid, ${(stat.size / 1024).toFixed(2)} Kb`);
            } else {
                console.log(j);
            }
    })
    .catch(e => {
        console.error(e);
        process.exit(2);
    });

}